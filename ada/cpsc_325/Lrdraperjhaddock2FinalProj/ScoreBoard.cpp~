//authors :   Ryan Draper, Jaimie Haddock
//date:       December 3, 2012
//file:       ScoreBoard.cpp

//this class makes a score board using the idea of a seven segment display
//       ___a__
//      |       |           0 = a,b,c,e,f,g
//     b|       |c          1 = c,f
//       ---d---            2 = a,c,d,e,g
//      |       |           etc...
//     e|       |f
//       ---g---

// ADT ScoreBoard
//      data structure: A design class that uses shapes class and uses cube wire and cube
//      data object:	Simulates a seven segment display 
//      operations:	Create, Destroy, drawScoreBoard, clearScoreBoard, addPointToScore



#include "ScoreBoard.h"
#include "Shapes.h"
#include "Globals.h"

//creates the instance of scoreboard class
//pre scoreboard does not exist 
//post scoreboard does exist
//usage ScoreBoard myScore();
ScoreBoard::ScoreBoard():score(0)
{
    zeroGrayOneYellow[0] = vec4(.7, .7, 0, 1);
    zeroGrayOneYellow[1] = vec4(2 ,2 ,0 ,1);
    onOff = false;
}

//deconstructor for score board class
//pre ScoreBoard instance exists
//post ScoreBoard instance does not exist
ScoreBoard::~ScoreBoard()
{}

//makes the scoreboard on the top right hand corner of the view displaying the public variable score 0-9
//pre scoreboard was not in view plane
//post scoreboard using shapes cube exists in top right of view
//param mv
//usage myScore.drawScoreBoard(mv);
void
ScoreBoard::drawScoreBoard(mat4& mv)
{

    switch(score)
    {
        case 0:
            displayZero(mv);
            break;
        case 1:
            displayOne(mv);
            break;
        case 2:
            displayTwo(mv);
            break;
        case 3:
            displayThree(mv);
            break;
        case 4:
            displayFour(mv);
            break;
        case 5:
            displayFive(mv);
            break;
        case 6:
            displaySix(mv);
            break;
        case 7:
            displaySeven(mv);
            break;
        case 8:
            displayEight(mv);
            break;
        case 9:
            displayNine(mv);
            break;
    }
    //case

}

//changes the color on the score board to 0
//pre score board will be displaying whatever the public variable score is 0-9
//post scoreboard and public variable score are 0
//param mv
//usage myScore.clearScoreBoard(mv);
void ScoreBoard::clearScoreBoard(mat4& mv)
{
    aToggle(mv, false);
    bToggle(mv, false);
    cToggle(mv, false);
    dToggle(mv, false);
    eToggle(mv, false);
    fToggle(mv, false);
    gToggle(mv, false);
}

//increments the value of score by 1 mod 10
//pre score is a public variable holding a single integer 0-9
//post score is a public vairable increased by one md 10
//usage myScore.addPointToScore();
void ScoreBoard::addPointToScore()
{
    score = (score + 1) % 10;
    if (score == 0)
    {
        //clearScoreBoard();
    }
}

//changes the color of the appropriate points on the seven segment display to show 0
//pre score board exists in the matrix view
//post 0 is displayed on the seven segment display
//param mv
//usage displayZero(mv);
void
ScoreBoard::displayZero(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, true);
    cToggle(mv, true);
    dToggle(mv, false);
    eToggle(mv, true);
    fToggle(mv, true);
    gToggle(mv, true);

}

//changes the color of the appropriate points on the seven segment display to show 1
//pre score board exists in the matrix view
//post 1 is displayed on the seven segment display
//param mv
//usage displayOne(mv);
void
ScoreBoard::displayOne(mat4& mv)
{
    aToggle(mv, false);
    bToggle(mv, false);
    cToggle(mv, true);
    dToggle(mv, false);
    eToggle(mv, false);
    fToggle(mv, true);
    gToggle(mv, false);

}

//changes the color of the appropriate points on the seven segment display to show 2
//pre score board exists in the matrix view
//post 2 is displayed on the seven segment display
//param mv
//usage displayTwo(mv);
void ScoreBoard::displayTwo(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, false);
    cToggle(mv, true);
    dToggle(mv, true);
    eToggle(mv, true);
    fToggle(mv, false);
    gToggle(mv, true);
}

//changes the color of the appropriate points on the seven segment display to show 3
//pre score board exists in the matrix view
//post 3 is displayed on the seven segment display
//param mv
//usage displayThree(mv);
void ScoreBoard::displayThree(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, false);
    cToggle(mv, true);
    dToggle(mv, true);
    eToggle(mv, false);
    fToggle(mv, true);
    gToggle(mv, true);
}

//changes the color of the appropriate points on the seven segment display to show 4
//pre score board exists in the matrix view
//post 4 is displayed on the seven segment display
//param mv
//usage displayFour(mv);
void ScoreBoard::displayFour(mat4& mv)
{
    aToggle(mv, false);
    bToggle(mv, true);
    cToggle(mv, true);
    dToggle(mv, true);
    eToggle(mv, false);
    fToggle(mv, true);
    gToggle(mv, false);
}

//changes the color of the appropriate points on the seven segment display to show 5
//pre score board exists in the matrix view
//post 5 is displayed on the seven segment display
//param mv
//usage displayfive(mv);
void ScoreBoard::displayFive(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, true);
    cToggle(mv, false);
    dToggle(mv, true);
    eToggle(mv, false);
    fToggle(mv, true);
    gToggle(mv, true);
}

//changes the color of the appropriate points on the seven segment display to show 6
//pre score board exists in the matrix view
//post 6 is displayed on the seven segment display
//param mv
//usage displaySix(mv);
void ScoreBoard::displaySix(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, true);
    cToggle(mv, false);
    dToggle(mv, true);
    eToggle(mv, true);
    fToggle(mv, true);
    gToggle(mv, true);
}

//changes the color of the appropriate points on the seven segment display to show 7
//pre score board exists in the matrix view
//post 7 is displayed on the seven segment display
//param mv
//usage displaySeven(mv);
void ScoreBoard::displaySeven(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, false);
    cToggle(mv, true);
    dToggle(mv, false);
    eToggle(mv, false);
    fToggle(mv, true);
    gToggle(mv, false);
}

//changes the color of the appropriate points on the seven segment display to show 8
//pre score board exists in the matrix view
//post 9 is displayed on the seven segment display
//param mv
//usage displayNine(mv);
void ScoreBoard::displayEight(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, true);
    cToggle(mv, true);
    dToggle(mv, true);
    eToggle(mv, true);
    fToggle(mv, true);
    gToggle(mv, true);
}

//changes the color of the appropriate points on the seven segment display to show 9
//pre score board exists in the matrix view
//post 9 is displayed on the seven segment display
//param mv
//usage displayine(mv);
void ScoreBoard::displayNine(mat4& mv)
{
    aToggle(mv, true);
    bToggle(mv, true);
    cToggle(mv, true);
    dToggle(mv, true);
    eToggle(mv, false);
    fToggle(mv, true);
    gToggle(mv, false);
}

//draws the 'a' location on the seven segment display either dark or bright yellow depending on the bool onOff
//pre a exists
//post a is either dark or bright yellow
//param mv
//	onOff
//usage aToggle(mv, onOff);
void ScoreBoard::aToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(7, 9.5, -10);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::bToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(6.25, 8.75, -10);
    mv = mv * RotateZ(90);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::cToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(7.75, 8.75, -10);
    mv = mv * RotateZ(90);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::dToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(7, 8, -10);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::eToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(6.25, 7.25, -10);
    mv = mv * RotateZ(90);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::fToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(7.75, 7.25, -10);
    mv = mv * RotateZ(90);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::gToggle(mat4& mv, bool onOff)
{
    mvMatrixStack.pushMatrix(mv);

    mv = mv * Translate(7, 6.5, -10);
    mv = mv * Scale(1, .3, .1);
    makeBar(mv, onOff);
    mv = mvMatrixStack.popMatrix();
}

void ScoreBoard::makeBar(mat4& mv, bool onOff)
{
    glUniformMatrix4fv( model_view, 1, GL_TRUE, mv );
    if (!onOff)
        shapes.drawCube(zeroGrayOneYellow[0]);
    else
        shapes.drawCube(zeroGrayOneYellow[1]);
}




